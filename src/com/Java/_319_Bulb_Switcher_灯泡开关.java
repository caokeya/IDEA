package src.com.Java;

/*
初始时有 n 个灯泡关闭。
第 1 轮，你打开所有的灯泡。
第 2 轮，每两个灯泡你关闭一次。
第 3 轮，每三个灯泡切换一次开关（如果关闭则开启，如果开启则关闭）。
第 i 轮，每 i 个灯泡切换一次开关。
对于第 n 轮，你只切换最后一个灯泡的开关。
找出 n 轮后有多少个亮着的灯泡。
示例:
输入: 3
输出: 1 
解释: 
初始时, 灯泡状态 [关闭, 关闭, 关闭].
第一轮后, 灯泡状态 [开启, 开启, 开启].
第二轮后, 灯泡状态 [开启, 关闭, 开启].
第三轮后, 灯泡状态 [开启, 关闭, 关闭]. 
 */
public class _319_Bulb_Switcher_灯泡开关 {
    class Solution {
        public int bulbSwitch(int n) {
            /*
            j=12时，编号为12的灯，在第1次，第12次；第2次，第6次；第3次，第4次一定会被执行Switch操作，这样的话，编号为12的等肯定为灭。
                      但是当完全平方数36就不一样了，因为他有一个特殊的因数6，这样当i=6时，只能被执行一次Switch操作，
                      这样推出，完全平方数一定是亮着的，所以本题的关键在于找完全平方数的个数。
            */
            //只有完全平方数只执行一次
            return (int) Math.sqrt(n);
        }
    }
}
