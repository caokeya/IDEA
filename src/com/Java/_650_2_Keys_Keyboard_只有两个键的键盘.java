package src.com.Java;

/*
最初在一个记事本上只有一个字符 'A'。你每次可以对这个记事本进行两种操作：
    Copy All (复制全部) : 你可以复制这个记事本中的所有字符(部分的复制是不允许的)。
    Paste (粘贴) : 你可以粘贴你上一次复制的字符。
给定一个数字 n 。你需要使用最少的操作次数，在记事本中打印出恰好 n 个 'A'。输出能够打印出 n 个 'A' 的最少操作次数。
示例 1:
输入: 3
输出: 3
解释:
最初, 我们只有一个字符 'A'。
第 1 步, 我们使用 Copy All 操作。
第 2 步, 我们使用 Paste 操作来获得 'AA'。
第 3 步, 我们使用 Paste 操作来获得 'AAA'。

 */
public class _650_2_Keys_Keyboard_只有两个键的键盘 {
    /*
    我们找一个除数d这样我们就可以对(n / d)进行d次复制得到n
    复制d个拷贝的过程需要d个步骤(全部复制1个步骤，粘贴d - 1个步骤)
    我们不断地把问题简化成一个小问题。
    最好的情况是当n快速减小，且方法接近O(log(n))
    例如，当n = 1024时，那么n除以2只需要10次迭代，这比O(n) DP方法快得多。
    最坏的情况发生在n是某个大素数的倍数时，如n = 997，但这种情况比较少见。
    */
    public int minSteps(int n) {
        int res = 0;
        for (int i = 2; i <= n; i++) {
            while (n % i == 0) {
                res = res + i;
                n = n / i;
            }
        }
        return res;
    }

}
