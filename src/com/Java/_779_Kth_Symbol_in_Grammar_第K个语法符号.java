package src.com.Java;

/*
在第一行我们写上一个 0。接下来的每一行，将前一行中的0替换为01，1替换为10。
给定行数 N 和序数 K，返回第 N 行中第 K个字符。（K从1开始）
例子:
输入: N = 1, K = 1
输出: 0
输入: N = 2, K = 1
输出: 0
输入: N = 2, K = 2
输出: 1
输入: N = 4, K = 5
输出: 1
解释:
第一行:          0
第二行:     0         1
第三行:    01         10
第四行:   0110       1001
        01101001  10010110
0110100110010110  1001011001101001
 */
public class _779_Kth_Symbol_in_Grammar_第K个语法符号 {
    /*
    f(2 * k) = 0 {if f(k) = 0} or, 1 {if f(k) = 1} => f(2 * k) = f(k) xor 0
    f(2 * k + 1) = 0 {if f(k) = 1} or 1 {if f(k) = 0} => f(2 * k + 1) = f(k) xor 1
    f(1001010) = 1 ^ 1 ^ 1 = (1^1) ^ 1 = 0 ^ 1 = 1
    f(11110011) = 1 ^ 1^ 1 ^ 1 ^ 1 ^1 = (1 ^ 1) ^ (1 ^ 1) ^ (1 ^1) = 0
    现在，如果k的二进制表示1的个数是偶数，那么f(k) = 0，如果k的二进制表示1的个数是奇数，那么f(k) = 1
    */
    class Solution {
        public int kthGrammar(int N, int K) {
            return Integer.bitCount(K - 1) & 1;
        }
    }
}
