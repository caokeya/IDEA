package src.com.Java;
/*
一个黑板上写着一个非负整数数组 nums[i] 。小红和小明轮流从黑板上擦掉一个数字，小红先手。
如果擦除一个数字后，剩余的所有数字按位异或运算得出的结果等于 0 的话，当前玩家游戏失败。 
另外，如果只剩一个数字，按位异或运算得到它本身；如果无数字剩余，按位异或运算结果为 0。
换种说法就是，轮到某个玩家时，如果当前黑板上所有数字按位异或运算结果等于 0，这个玩家获胜。
假设两个玩家每步都使用最优解，当且仅当小红获胜时返回 true。
示例:
输入: nums = [1, 1, 2]
输出: false
解释: 
小红有两个选择: 擦掉数字 1 或 2。
如果擦掉 1, 数组变成 [1, 2]。剩余数字按位异或得到 1 XOR 2 = 3。那么小明可以擦掉任意数字，因为小红会成为擦掉最后一个数字的人，她总是会输。
如果小红擦掉 2，那么数组变成[1, 1]。剩余数字按位异或得到 1 XOR 1 = 0。小红仍然会输掉游戏。
 */
public class _810_Chalkboard_XOR_Game_黑板异或游戏_难 {
    /*
           不是所有的数字都是一样的。否则xor将等于0 
           如果所有的数字都不相同，这意味着至少有两个不同的数字。
     Alice总是可以擦掉一个不同于当前xor的数字。
           所以爱丽丝在这种情况下不会输掉这个回合。
     */
    class Solution {
        public boolean xorGame(int[] nums) {
            int xor = 0;
            for (int i : nums)
                xor ^= i;
            return xor == 0 || nums.length % 2 == 0;
        }
    }
}
