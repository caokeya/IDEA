package com.Java;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

/*
在节点网络中，只有当 graph[i][j] = 1 时，每个节点 i 能够直接连接到另一个节点 j。
一些节点 initial 最初被恶意软件感染。只要两个节点直接连接，且其中至少一个节点受到恶意软件的感染，那么两个节点都将被恶意软件感染。
这种恶意软件的传播将继续，直到没有更多的节点可以被这种方式感染。
假设 M(initial) 是在恶意软件停止传播之后，整个网络中感染恶意软件的最终节点数。
我们可以从初始列表中删除一个节点。如果移除这一节点将最小化 M(initial)， 则返回该节点。如果有多个节点满足条件，就返回索引最小的节点。
请注意，如果某个节点已从受感染节点的列表 initial 中删除，它以后可能仍然因恶意软件传播而受到感染。
示例 1：
输入：graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
输出：0
示例 2：
输入：graph = [[1,0,0],[0,1,0],[0,0,1]], initial = [0,2]
输出：0
示例 3：
输入：graph = [[1,1,1],[1,1,1],[1,1,1]], initial = [1,2]
输出：1
 */
public class _924_Minimize_Malware_Spread_尽量减少恶意软件的传播_难 {
    class Solution {
        public int minMalwareSpread(int[][] graph, int[] initial) {

            boolean[] visited = new boolean[graph.length];
            int[] connectCount = new int[graph.length];

            for (int i = 0; i < graph.length; ++i) {
                if (!visited[i]) {
                    List<Integer> connected = new ArrayList<>();
                    dfs(graph, i, 0, visited, connected);
                    // System.out.println("Connected: " + connected);
                    for (int n : connected) {
                        connectCount[n] = connected.size();
                    }
                }
            }

            int ret = -1;
            int minConnectCount = Integer.MIN_VALUE;
            for (int i : initial) {
                if (connectCount[i] > minConnectCount) {
                    minConnectCount = connectCount[i];
                    ret = i;
                }
                if (connectCount[i] == minConnectCount && ret > i) {
                    ret = i;
                }
            }

            return ret;

        }

        public void dfs(int[][] graph, int node, int count, boolean[] visited, List<Integer> connected) {
            visited[node] = true;
            connected.add(node);

            for (int i = 0; i < graph.length; ++i) {
                if (graph[node][i] == 1 && !visited[i]) {
                    dfs(graph, i, count + 1, visited, connected);
                }
            }
        }
    }

    class Solution2 {
        public int minMalwareSpread(int[][] graph, int[] initial) {
            int[] parent = new int[graph.length];
            int[] cnt = new int[graph.length];
            for (int i = 0; i < parent.length; i++) {
                parent[i] = i;
                cnt[i] = 1;
            }
            for (int i = 0; i < graph.length; i++) {
                for (int j = i + 1; j < graph.length; j++) {
                    if (graph[i][j] == 1) {
                        int pi = find(parent, i);
                        int pj = find(parent, j);
                        if (pi != pj) {
                            parent[pj] = pi;
                            cnt[pi] += cnt[pj];
                        }
                    }
                }
            }
            int max = -1;
            int idx = -1;
            Arrays.sort(initial);
            for (int i : initial) {
                int p = find(parent, i);
                if (cnt[p] > max) {
                    max = cnt[p];
                    idx = i;
                }
            }
            return idx;
        }

        public int find(int[] parent, int i) {
            if (parent[i] != i)
                parent[i] = find(parent, parent[i]);
            return parent[i];
        }
    }
}
