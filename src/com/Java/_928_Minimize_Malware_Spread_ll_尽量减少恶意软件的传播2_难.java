package src.com.Java;

import java.util.Arrays;
import java.util.HashSet;
import java.util.Set;

/*
(这个问题与 尽量减少恶意软件的传播 是一样的，不同之处用粗体表示。)
在节点网络中，只有当 graph[i][j] = 1 时，每个节点 i 能够直接连接到另一个节点 j。
一些节点 initial 最初被恶意软件感染。只要两个节点直接连接，且其中至少一个节点受到恶意软件的感染，那么两个节点都将被恶意软件感染。
这种恶意软件的传播将继续，直到没有更多的节点可以被这种方式感染。
假设 M(initial) 是在恶意软件停止传播之后，整个网络中感染恶意软件的最终节点数。
我们可以从初始列表中删除一个节点，!!!!并完全移除该节点以及从该节点到任何其他节点的任何连接。
如果移除这一节点将最小化 M(initial)， 则返回该节点。如果有多个节点满足条件，就返回索引最小的节点。
示例 1：
输出：graph = [[1,1,0],[1,1,0],[0,0,1]], initial = [0,1]
输入：0
示例 2：
输入：graph = [[1,1,0],[1,1,1],[0,1,1]], initial = [0,1]
输出：1
示例 3：
输入：graph = [[1,1,0,0],[1,1,1,0],[0,1,1,1],[0,0,1,1]], initial = [0,1]
输出：1
 */
public class _928_Minimize_Malware_Spread_ll_尽量减少恶意软件的传播2_难 {
    class Solution {
        int dfs(int[][] graph, int node, Set<Integer> visited) {
            if (visited.contains(node)) return 0;
            visited.add(node);
            int result = 1;
            for (int i = 0; i < graph.length; i++) {
                if (graph[node][i] == 1) {
                    result += dfs(graph, i, visited);
                }
            }
            return result;
        }

        int infectedComponentSize(int[][] graph, int[] initial, int skip) {
            int result = 0;
            Set<Integer> visited = new HashSet<>();
            visited.clear();
            visited.add(skip);
            for (int i : initial) {
                result += dfs(graph, i, visited);
            }
            return result;
        }

        public int minMalwareSpread(int[][] graph, int[] initial) {
            Set<Integer> v = new HashSet<>();
            int minSize = Integer.MAX_VALUE, result = Integer.MAX_VALUE;
            for (int i : initial) {
                int size = infectedComponentSize(graph, initial, i);
                if (size < minSize) {
                    minSize = size;
                    result = i;
                } else {
                    result = Math.min(result, i);
                }
            }
            return result;
        }
    }
}
